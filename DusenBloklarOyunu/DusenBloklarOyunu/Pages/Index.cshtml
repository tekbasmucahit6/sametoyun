@page
@model DusenBloklarOyunu.Pages.IndexModel
@{
    ViewData["Title"] = "Düşen Elmalar";
}

<h1>@ViewData["Title"]</h1>

@if (TempData["Message"] != null)
{
        <p style="color: green;">@TempData["Message"]</p>
}

@if (TempData["Error"] != null)
{
        <p style="color: red;">@TempData["Error"]</p>
}

<!-- Overlay (Arka Plan Kararması) -->
<div id="overlay" style="display: none;"></div>

<div id="level-up-message" class="hidden">Level Atladınız!</div>

<div id="game-area">
    <div id="player"></div>
</div>

<div id="game-controls">
    <button id="start-button">Oyunu Başlat</button>
</div>

<div id="score-board">
    <p>Puan: <span id="score">0</span></p>
    <p>Seviye: <span id="level">1</span></p>
</div>

<div id="gameInfo">
    <p>Oyuncu Adı: <span id="playerName">---</span></p>
    <p>Puan: <span id="scoreDisplay">0</span></p>
    <p>Seviye: <span id="levelDisplay">1</span></p>
    <p>Zaman: <span id="timeDisplay">---</span></p>
</div>

<div id="name-input" style="display: none;">
    <label for="player-name">Lütfen isminizi girin:</label>
    <input type="text" id="player-name" />
    <button id="submit-name">Başla</button>
</div>

<script>
    let playerName = "";
    let score = 0;
    let level = 1;
    let gameTime = new Date().toLocaleTimeString();
    let gameInterval;
    let isGameRunning = false;
    let fallingItems = [];
    let playerPosition = 250;
    const playerSpeed = 15;

    function startGame() {
        if (isGameRunning) return;

        isGameRunning = true;
        score = 0;
        level = 1;
        gameTime = new Date().toLocaleTimeString();
        fallingItems = [];
        updateGameInfo();

        // Oyunun başlangıcında overlay'in kapalı olduğundan emin olun
        document.getElementById("overlay").style.display = "none";

        gameInterval = setInterval(updateGame, 30);
        setInterval(spawnItem, 1000);
        document.addEventListener("keydown", movePlayer);

        document.getElementById("start-button").style.display = "none";
    }

    function updateGame() {
        if (!isGameRunning) return;
        moveFallingItems();

        if (score >= 50 * level) {
            level += 1;
            updateGameInfo();
            showLevelUpMessage(); // Level atlama mesajını göster
        }
    }

    function moveFallingItems() {
        for (let i = 0; i < fallingItems.length; i++) {
            let item = fallingItems[i];
            item.y += 5;
            if (item.y > 600) {
                fallingItems.splice(i, 1);
                i--;
                continue;
            }
            if (isCollision(item)) {
                if (item.type === "normal") {
                    score += 10;
                    updateGameInfo();
                } else if (item.type === "dangerous") {
                    gameOver();
                }
                fallingItems.splice(i, 1);
                i--;
                let blockElement = document.getElementById(item.id);
                if (blockElement) {
                    blockElement.remove();
                }
            }
            let blockElement = document.getElementById(item.id);
            if (blockElement) {
                blockElement.style.top = item.y + "px";
            }
        }
    }

    function spawnItem() {
        let isDangerous = Math.random() < 0.2;
        let xPosition = Math.random() * (500 - 50);
        let itemType = isDangerous ? "dangerous" : "normal";
        let itemId = "item" + Date.now();
        let newItem = {
            id: itemId,
            type: itemType,
            x: xPosition,
            y: -50,
        };
        let blockElement = document.createElement("div");
        blockElement.classList.add(itemType === "normal" ? "normal-item" : "dangerous-item");
        blockElement.id = itemId;
        blockElement.style.left = newItem.x + "px";
        blockElement.style.top = newItem.y + "px";
        document.getElementById("game-area").appendChild(blockElement);
        fallingItems.push(newItem);
    }

    function isCollision(item) {
        let player = document.getElementById("player");
        let playerRect = player.getBoundingClientRect();
        let itemRect = document.getElementById(item.id).getBoundingClientRect();
        return !(itemRect.right < playerRect.left || itemRect.left > playerRect.right || itemRect.bottom < playerRect.top || itemRect.top > playerRect.bottom);
    }

    function gameOver() {
        isGameRunning = false;
        clearInterval(gameInterval);
        alert("Oyun Bitti! Skor: " + score);
        saveGameData();
    }

    function updateGameInfo() {
        document.getElementById("playerName").innerText = playerName;
        document.getElementById("scoreDisplay").innerText = score;
        document.getElementById("levelDisplay").innerText = level;
        document.getElementById("timeDisplay").innerText = gameTime;

        document.getElementById("score").innerText = score;
        document.getElementById("level").innerText = level;
    }

    function saveGameData() {
        const gameData = `Oyuncu Adı: ${playerName}\nPuan: ${score}\nSeviye: ${level}\nZaman: ${gameTime}`;
        const blob = new Blob([gameData], { type: "text/plain" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "oyun_verisi.txt";
        link.click();
    }

    function submitPlayerName() {
        playerName = document.getElementById("player-name").value.trim();
        if (playerName !== "") {
            document.getElementById("name-input").style.display = "none";
            startGame();
        } else {
            alert("Lütfen geçerli bir isim girin.");
        }
    }

    document.getElementById("start-button").addEventListener("click", function () {
        // İsim giriş ekranını aç
        document.getElementById("name-input").style.display = "block";
        // Kararan ekranı aç
        document.getElementById("overlay").style.display = "block";
    });

    document.getElementById("submit-name").addEventListener("click", submitPlayerName);

    function movePlayer(event) {
        const player = document.getElementById("player");
        if (!isGameRunning) return;

        if (event.key === "ArrowLeft" || event.key === "a") {
            if (playerPosition > 0) {
                playerPosition -= playerSpeed;
                player.style.left = playerPosition + "px";
            }
        }
        if (event.key === "ArrowRight" || event.key === "d") {
            if (playerPosition < 450) {
                playerPosition += playerSpeed;
                player.style.left = playerPosition + "px";
            }
        }
    }

    function showLevelUpMessage() {
        const message = document.getElementById("level-up-message");
        message.classList.add("show"); // Görünür hale getir

        setTimeout(() => {
            message.classList.remove("show"); // Tekrar görünmez hale getir
        }, 2000);
    }
</script>

<style>
    body {
        background-image: url('/images/Adsız tasarım.png');
        background-size: cover;
        background-position: center;
        margin: 0;
        height: 100vh;
    }

    /* Overlay */
    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7); /* Kararmış arka plan */
        z-index: 999;
    }

    #game-area {
        position: relative;
        width: 500px;
        height: 600px;
        border: 2px solid black;
        overflow: hidden;
        background-color: brown;
    }

    .dangerous-item {
        position: absolute;
        width: 50px;
        height: 50px;
        background-image: url('/images/projeelma.png');
        background-size: cover;
    }

    #player {
        position: absolute;
        bottom: 10px;
        left: 50%;
        width: 90px;
        height: 90px;
        background-image: url('/images/projesepet.png');
        background-size: cover;
        transform: translateX(-50%);
    }

    .normal-item {
        position: absolute;
        width: 50px;
        height: 50px;
        background-image: url('/images/kırmızıelma.png');
        background-size: cover;
    }

    #game-controls {
        margin-top: 20px;
        text-align: left;
    }

    #score-board {
        margin-top: 20px;
        text-align: left;
    }

    #gameInfo {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 15px;
        border-radius: 5px;
        font-size: 14px;
    }

    #name-input {
        margin-top: 20px;
        text-align: center;
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 20px;
    }

    #name-input label {
        font-size: 24px;
    }

    #level-up-message {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 
